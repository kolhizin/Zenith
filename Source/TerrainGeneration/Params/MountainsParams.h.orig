
      #pragma once
      #pragma warning(push)
      #pragma warning(disable:4101)
      #include "Common.h"
    
namespace zenith {
namespace terragen {
struct MountainMetaGenerator1_Params {
zenith::util::nameid uid;
std::string type;
std::vector<TerraGenParam_CatDistrString> general;
std::vector<TerraGenParam_CatDistrString> afterNull;
std::vector<TerraGenParam_CatDistrString> afterTop;
};
template<class It> class zenith::util::ioconv::io_handler_impl<zenith::terragen::MountainMetaGenerator1_Params, It>{public:
typedef zenith::terragen::MountainMetaGenerator1_Params value_type;
static const zenith::util::ioconv::NodeType node_type = zenith::util::ioconv::NodeType::COMPLEX;
inline static void input(zenith::terragen::MountainMetaGenerator1_Params &val, const It &it){
zenith::util::ioconv::input_named_required(val.uid, it, "uid");
zenith::util::ioconv::input_named_required(val.type, it, "type");
zenith::util::ioconv::input_named_multiple(val.general, it, "general");
zenith::util::ioconv::input_named_multiple(val.afterNull, it, "afterNull");
zenith::util::ioconv::input_named_multiple(val.afterTop, it, "afterTop");
}
inline static void output(const zenith::terragen::MountainMetaGenerator1_Params &val, It &it){
zenith::util::ioconv::output_single(val.uid, it.append_value("uid", zenith::util::ioconv::NodeValueHint::ATTRIBUTE));
zenith::util::ioconv::output_single(val.type, it.append_value("type", zenith::util::ioconv::NodeValueHint::ATTRIBUTE));
zenith::util::ioconv::input_named_multiple(val.general, it, "general");
zenith::util::ioconv::input_named_multiple(val.afterNull, it, "afterNull");
zenith::util::ioconv::input_named_multiple(val.afterTop, it, "afterTop");
}
};


struct MountainTopGenerator1_Params {
zenith::util::nameid uid;
std::string type;
TerraGenParam_Box2D boundingBox;
double heightLambda;
double sizeLambda;
std::vector<TerraGenParam_CatDistrInt> numTops;
double minNodeDistance;
double minMountainTopDistance;
uint32_t numTries;
};
template<class It> class zenith::util::ioconv::io_handler_impl<zenith::terragen::MountainTopGenerator1_Params, It>{public:
typedef zenith::terragen::MountainTopGenerator1_Params value_type;
static const zenith::util::ioconv::NodeType node_type = zenith::util::ioconv::NodeType::COMPLEX;
inline static void input(zenith::terragen::MountainTopGenerator1_Params &val, const It &it){
zenith::util::ioconv::input_named_required(val.uid, it, "uid");
zenith::util::ioconv::input_named_required(val.type, it, "type");
zenith::util::ioconv::input_named_required(val.boundingBox, it, "boundingBox");
val.heightLambda = 100.0;
zenith::util::ioconv::input_named_optional(val.heightLambda, it, "heightLambda");
val.sizeLambda = 100.0;
zenith::util::ioconv::input_named_optional(val.sizeLambda, it, "sizeLambda");
zenith::util::ioconv::input_named_multiple(val.numTops, it, "numTops");
val.minNodeDistance = 10.0;
zenith::util::ioconv::input_named_optional(val.minNodeDistance, it, "minNodeDistance");
val.minMountainTopDistance = 50.0;
zenith::util::ioconv::input_named_optional(val.minMountainTopDistance, it, "minMountainTopDistance");
val.numTries = 1;
zenith::util::ioconv::input_named_optional(val.numTries, it, "numTries");
}
inline static void output(const zenith::terragen::MountainTopGenerator1_Params &val, It &it){
zenith::util::ioconv::output_single(val.uid, it.append_value("uid", zenith::util::ioconv::NodeValueHint::ATTRIBUTE));
zenith::util::ioconv::output_single(val.type, it.append_value("type", zenith::util::ioconv::NodeValueHint::ATTRIBUTE));
zenith::util::ioconv::output_single(val.boundingBox, it.append_complex("boundingBox"));
zenith::util::ioconv::output_single(val.heightLambda, it.append_value("heightLambda"));
zenith::util::ioconv::output_single(val.sizeLambda, it.append_value("sizeLambda"));
zenith::util::ioconv::input_named_multiple(val.numTops, it, "numTops");
zenith::util::ioconv::output_single(val.minNodeDistance, it.append_value("minNodeDistance"));
zenith::util::ioconv::output_single(val.minMountainTopDistance, it.append_value("minMountainTopDistance"));
zenith::util::ioconv::output_single(val.numTries, it.append_value("numTries"));
}
};


struct MountainTopRidgeGenerator1_Params {
zenith::util::nameid uid;
std::string type;
TerraGenParam_MuSigma alpha;
TerraGenParam_MuSigma beta;
TerraGenParam_Box1D betaBox;
TerraGenParam_MuSigma len;
TerraGenParam_Box1D lenBox;
std::vector<TerraGenParam_CatDistrInt> numRidges;
double minNodeDistance;
uint32_t numTries;
};
template<class It> class zenith::util::ioconv::io_handler_impl<zenith::terragen::MountainTopRidgeGenerator1_Params, It>{public:
typedef zenith::terragen::MountainTopRidgeGenerator1_Params value_type;
static const zenith::util::ioconv::NodeType node_type = zenith::util::ioconv::NodeType::COMPLEX;
inline static void input(zenith::terragen::MountainTopRidgeGenerator1_Params &val, const It &it){
zenith::util::ioconv::input_named_required(val.uid, it, "uid");
zenith::util::ioconv::input_named_required(val.type, it, "type");
zenith::util::ioconv::input_named_required(val.alpha, it, "alpha");
zenith::util::ioconv::input_named_required(val.beta, it, "beta");
zenith::util::ioconv::input_named_required(val.betaBox, it, "betaBox");
zenith::util::ioconv::input_named_required(val.len, it, "len");
zenith::util::ioconv::input_named_required(val.lenBox, it, "lenBox");
zenith::util::ioconv::input_named_multiple(val.numRidges, it, "numRidges");
val.minNodeDistance = 10.0;
zenith::util::ioconv::input_named_optional(val.minNodeDistance, it, "minNodeDistance");
val.numTries = 1;
zenith::util::ioconv::input_named_optional(val.numTries, it, "numTries");
}
inline static void output(const zenith::terragen::MountainTopRidgeGenerator1_Params &val, It &it){
zenith::util::ioconv::output_single(val.uid, it.append_value("uid", zenith::util::ioconv::NodeValueHint::ATTRIBUTE));
zenith::util::ioconv::output_single(val.type, it.append_value("type", zenith::util::ioconv::NodeValueHint::ATTRIBUTE));
zenith::util::ioconv::output_single(val.alpha, it.append_complex("alpha"));
zenith::util::ioconv::output_single(val.beta, it.append_complex("beta"));
zenith::util::ioconv::output_single(val.betaBox, it.append_complex("betaBox"));
zenith::util::ioconv::output_single(val.len, it.append_complex("len"));
zenith::util::ioconv::output_single(val.lenBox, it.append_complex("lenBox"));
zenith::util::ioconv::input_named_multiple(val.numRidges, it, "numRidges");
zenith::util::ioconv::output_single(val.minNodeDistance, it.append_value("minNodeDistance"));
zenith::util::ioconv::output_single(val.numTries, it.append_value("numTries"));
}
};


struct MountainContGenerator1_Params {
zenith::util::nameid uid;
std::string type;
TerraGenParam_MuSigma alpha;
TerraGenParam_Box1D alphaBox;
TerraGenParam_MuSigma beta;
TerraGenParam_Box1D betaBox;
TerraGenParam_MuSigma mix;
TerraGenParam_Box1D mixBox;
TerraGenParam_MuSigma len;
TerraGenParam_Box1D lenBox;
double minNodeDistance;
uint32_t numTries;
};
template<class It> class zenith::util::ioconv::io_handler_impl<zenith::terragen::MountainContGenerator1_Params, It>{public:
typedef zenith::terragen::MountainContGenerator1_Params value_type;
static const zenith::util::ioconv::NodeType node_type = zenith::util::ioconv::NodeType::COMPLEX;
inline static void input(zenith::terragen::MountainContGenerator1_Params &val, const It &it){
zenith::util::ioconv::input_named_required(val.uid, it, "uid");
zenith::util::ioconv::input_named_required(val.type, it, "type");
zenith::util::ioconv::input_named_required(val.alpha, it, "alpha");
zenith::util::ioconv::input_named_required(val.alphaBox, it, "alphaBox");
zenith::util::ioconv::input_named_required(val.beta, it, "beta");
zenith::util::ioconv::input_named_required(val.betaBox, it, "betaBox");
zenith::util::ioconv::input_named_required(val.mix, it, "mix");
zenith::util::ioconv::input_named_required(val.mixBox, it, "mixBox");
zenith::util::ioconv::input_named_required(val.len, it, "len");
zenith::util::ioconv::input_named_required(val.lenBox, it, "lenBox");
val.minNodeDistance = 10.0;
zenith::util::ioconv::input_named_optional(val.minNodeDistance, it, "minNodeDistance");
val.numTries = 1;
zenith::util::ioconv::input_named_optional(val.numTries, it, "numTries");
}
inline static void output(const zenith::terragen::MountainContGenerator1_Params &val, It &it){
zenith::util::ioconv::output_single(val.uid, it.append_value("uid", zenith::util::ioconv::NodeValueHint::ATTRIBUTE));
zenith::util::ioconv::output_single(val.type, it.append_value("type", zenith::util::ioconv::NodeValueHint::ATTRIBUTE));
zenith::util::ioconv::output_single(val.alpha, it.append_complex("alpha"));
zenith::util::ioconv::output_single(val.alphaBox, it.append_complex("alphaBox"));
zenith::util::ioconv::output_single(val.beta, it.append_complex("beta"));
zenith::util::ioconv::output_single(val.betaBox, it.append_complex("betaBox"));
zenith::util::ioconv::output_single(val.mix, it.append_complex("mix"));
zenith::util::ioconv::output_single(val.mixBox, it.append_complex("mixBox"));
zenith::util::ioconv::output_single(val.len, it.append_complex("len"));
zenith::util::ioconv::output_single(val.lenBox, it.append_complex("lenBox"));
zenith::util::ioconv::output_single(val.minNodeDistance, it.append_value("minNodeDistance"));
zenith::util::ioconv::output_single(val.numTries, it.append_value("numTries"));
}
};


struct MountainForkGenerator1_Params {
zenith::util::nameid uid;
std::string type;
TerraGenParam_MuSigma alpha0;
TerraGenParam_Box1D alpha0Box;
TerraGenParam_MuSigma alpha1;
TerraGenParam_Box1D alpha1Box;
TerraGenParam_MuSigma beta;
TerraGenParam_Box1D betaBox;
TerraGenParam_MuSigma mix;
TerraGenParam_Box1D mixBox;
TerraGenParam_MuSigma len;
TerraGenParam_Box1D lenBox;
double minNodeDistance;
uint32_t numTries;
};
template<class It> class zenith::util::ioconv::io_handler_impl<zenith::terragen::MountainForkGenerator1_Params, It>{public:
typedef zenith::terragen::MountainForkGenerator1_Params value_type;
static const zenith::util::ioconv::NodeType node_type = zenith::util::ioconv::NodeType::COMPLEX;
inline static void input(zenith::terragen::MountainForkGenerator1_Params &val, const It &it){
zenith::util::ioconv::input_named_required(val.uid, it, "uid");
zenith::util::ioconv::input_named_required(val.type, it, "type");
zenith::util::ioconv::input_named_required(val.alpha0, it, "alpha0");
zenith::util::ioconv::input_named_required(val.alpha0Box, it, "alpha0Box");
zenith::util::ioconv::input_named_required(val.alpha1, it, "alpha1");
zenith::util::ioconv::input_named_required(val.alpha1Box, it, "alpha1Box");
zenith::util::ioconv::input_named_required(val.beta, it, "beta");
zenith::util::ioconv::input_named_required(val.betaBox, it, "betaBox");
zenith::util::ioconv::input_named_required(val.mix, it, "mix");
zenith::util::ioconv::input_named_required(val.mixBox, it, "mixBox");
zenith::util::ioconv::input_named_required(val.len, it, "len");
zenith::util::ioconv::input_named_required(val.lenBox, it, "lenBox");
val.minNodeDistance = 10.0;
zenith::util::ioconv::input_named_optional(val.minNodeDistance, it, "minNodeDistance");
val.numTries = 1;
zenith::util::ioconv::input_named_optional(val.numTries, it, "numTries");
}
inline static void output(const zenith::terragen::MountainForkGenerator1_Params &val, It &it){
zenith::util::ioconv::output_single(val.uid, it.append_value("uid", zenith::util::ioconv::NodeValueHint::ATTRIBUTE));
zenith::util::ioconv::output_single(val.type, it.append_value("type", zenith::util::ioconv::NodeValueHint::ATTRIBUTE));
zenith::util::ioconv::output_single(val.alpha0, it.append_complex("alpha0"));
zenith::util::ioconv::output_single(val.alpha0Box, it.append_complex("alpha0Box"));
zenith::util::ioconv::output_single(val.alpha1, it.append_complex("alpha1"));
zenith::util::ioconv::output_single(val.alpha1Box, it.append_complex("alpha1Box"));
zenith::util::ioconv::output_single(val.beta, it.append_complex("beta"));
zenith::util::ioconv::output_single(val.betaBox, it.append_complex("betaBox"));
zenith::util::ioconv::output_single(val.mix, it.append_complex("mix"));
zenith::util::ioconv::output_single(val.mixBox, it.append_complex("mixBox"));
zenith::util::ioconv::output_single(val.len, it.append_complex("len"));
zenith::util::ioconv::output_single(val.lenBox, it.append_complex("lenBox"));
zenith::util::ioconv::output_single(val.minNodeDistance, it.append_value("minNodeDistance"));
zenith::util::ioconv::output_single(val.numTries, it.append_value("numTries"));
}
};

}
}


      #pragma warning(pop)
    