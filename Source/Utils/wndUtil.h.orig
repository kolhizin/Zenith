
      #pragma once      
      #include <Utils\ioconv\io_config.h>
      #include <Utils\macro_version.h>
      #include <vector>
      #include <list>
      #include <map>
    
namespace zenith {
namespace util {
struct WndSize {
uint16_t width;
uint16_t height;
};
template<class It> class zenith::util::ioconv::io_handler_impl<zenith::util::WndSize, It>{public:
typedef zenith::util::WndSize value_type;
static const zenith::util::ioconv::NodeType node_type = zenith::util::ioconv::NodeType::COMPLEX;
inline static void input(zenith::util::WndSize &val, const It &it){
val.width = 800;
zenith::util::ioconv::input_named_optional(val.width, it, "width");
val.height = 600;
zenith::util::ioconv::input_named_optional(val.height, it, "height");
}
inline static void output(const zenith::util::WndSize &val, It &it){
zenith::util::ioconv::output_single(val.width, it.append_value("width", zenith::util::ioconv::NodeValueHint::ATTRIBUTE));
zenith::util::ioconv::output_single(val.height, it.append_value("height", zenith::util::ioconv::NodeValueHint::ATTRIBUTE));
}
};


struct WndPos {
uint16_t x;
uint16_t y;
};
template<class It> class zenith::util::ioconv::io_handler_impl<zenith::util::WndPos, It>{public:
typedef zenith::util::WndPos value_type;
static const zenith::util::ioconv::NodeType node_type = zenith::util::ioconv::NodeType::COMPLEX;
inline static void input(zenith::util::WndPos &val, const It &it){
val.x = 200;
zenith::util::ioconv::input_named_optional(val.x, it, "x");
val.y = 200;
zenith::util::ioconv::input_named_optional(val.y, it, "y");
}
inline static void output(const zenith::util::WndPos &val, It &it){
zenith::util::ioconv::output_single(val.x, it.append_value("x", zenith::util::ioconv::NodeValueHint::ATTRIBUTE));
zenith::util::ioconv::output_single(val.y, it.append_value("y", zenith::util::ioconv::NodeValueHint::ATTRIBUTE));
}
};


struct WndConfig {
WndSize size;
WndPos pos;
bool fullscreen;
bool showCursor;
std::string title;
std::string iconFilename;
};
template<class It> class zenith::util::ioconv::io_handler_impl<zenith::util::WndConfig, It>{public:
typedef zenith::util::WndConfig value_type;
static const zenith::util::ioconv::NodeType node_type = zenith::util::ioconv::NodeType::COMPLEX;
inline static void input(zenith::util::WndConfig &val, const It &it){
zenith::util::ioconv::input_named_required(val.size, it, "size");
zenith::util::ioconv::input_named_required(val.pos, it, "pos");
val.fullscreen = false;
zenith::util::ioconv::input_named_optional(val.fullscreen, it, "fullscreen");
val.showCursor = true;
zenith::util::ioconv::input_named_optional(val.showCursor, it, "showCursor");
zenith::util::ioconv::input_named_required(val.title, it, "title");
val.iconFilename = "";
zenith::util::ioconv::input_named_optional(val.iconFilename, it, "iconFilename");
}
inline static void output(const zenith::util::WndConfig &val, It &it){
zenith::util::ioconv::output_single(val.size, it.append_complex("size"));
zenith::util::ioconv::output_single(val.pos, it.append_complex("pos"));
zenith::util::ioconv::output_single(val.fullscreen, it.append_value("fullscreen"));
zenith::util::ioconv::output_single(val.showCursor, it.append_value("showCursor"));
zenith::util::ioconv::output_single(val.title, it.append_value("title"));
zenith::util::ioconv::output_single(val.iconFilename, it.append_value("iconFilename"));
}
};

}
}

